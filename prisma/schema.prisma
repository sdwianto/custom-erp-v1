generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Tenant {
  id                   String                @id @default(cuid())
  name                 String
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  version              Int                   @default(1)
  isDeleted            Boolean               @default(false)
  createdBy            String?
  updatedBy            String?
  isActive             Boolean               @default(true)
  apInvoices           APInvoice[]
  arInvoices           ARInvoice[]
  addressBooks         AddressBook[]
  breakdowns           Breakdown[]
  chartAccounts        ChartAccount[]
  employees            Employee[]
  equipment            Equipment[]
  glEntries            GLEntry[]
  grns                 GRN[]
  items                Item[]
  purchaseOrders       PurchaseOrder[]
  purchaseRequisitions PurchaseRequisition[]
  roles                Role[]
  tickets              Ticket[]
  usageLogs            UsageLog[]
  users                User[]
  userRoles            UserRole[]
  workOrders           WorkOrder[]
}

model User {
  id        String     @id @default(cuid())
  email     String
  tenantId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  version   Int        @default(1)
  isDeleted Boolean    @default(false)
  createdBy String?
  updatedBy String?
  name      String?
  tenant    Tenant     @relation(fields: [tenantId], references: [id])
  userRoles UserRole[]

  @@index([tenantId, isDeleted], map: "idx_user_tenant_active")
  @@index([tenantId, email], map: "idx_user_tenant_email")
}

model Role {
  id        String     @id @default(cuid())
  name      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  tenantId  String
  version   Int        @default(1)
  isDeleted Boolean    @default(false)
  createdBy String?
  updatedBy String?
  tenant    Tenant     @relation(fields: [tenantId], references: [id])
  userRoles UserRole[]

  @@index([tenantId, name], map: "idx_role_tenant_name")
}

model Permission {
  id        String   @id @default(cuid())
  code      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  version   Int      @default(1)
  isDeleted Boolean  @default(false)
  createdBy String?
  updatedBy String?
  tenantId  String

  @@index([tenantId, code], map: "idx_permission_tenant_code")
}

model UserRole {
  id        String   @id @default(cuid())
  tenantId  String
  userId    String
  roleId    String
  version   Int      @default(1)
  isDeleted Boolean  @default(false)
  createdBy String?
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @relation(fields: [roleId], references: [id])
  tenant    Tenant   @relation(fields: [tenantId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([tenantId, userId], map: "idx_userrole_tenant_user")
}

model AuditEvent {
  id        String   @id @default(cuid())
  tenantId  String
  actorId   String?
  entity    String
  entityId  String
  action    String
  changes   Json?
  version   Int      @default(1)
  isDeleted Boolean  @default(false)
  createdBy String?
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hash      String

  @@index([actorId], map: "idx_auditevent_actor")
  @@index([tenantId, createdAt], map: "idx_auditevent_tenant_created")
  @@index([tenantId, entity, entityId], map: "idx_auditevent_tenant_entity")
}

model AddressBook {
  id         String     @id @default(cuid())
  tenantId   String
  alphaName  String
  isCustomer Boolean    @default(false)
  isVendor   Boolean    @default(false)
  isEmployee Boolean    @default(false)
  altKey     String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  version    Int        @default(1)
  isDeleted  Boolean    @default(false)
  createdBy  String?
  updatedBy  String?
  tenant     Tenant     @relation(fields: [tenantId], references: [id])
  employees  Employee[]

  @@index([tenantId, alphaName], map: "idx_addressbook_tenant_alpha")
  @@index([tenantId, isCustomer, isVendor, isEmployee], map: "idx_addressbook_tenant_types")
}

model Item {
  id          String       @id @default(cuid())
  tenantId    String
  number      String       @unique
  description String
  type        String
  stdCost     Decimal      @default(0)
  lastCost    Decimal      @default(0)
  avgCost     Decimal      @default(0)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  version     Int          @default(1)
  isDeleted   Boolean      @default(false)
  createdBy   String?
  updatedBy   String?
  tenant      Tenant       @relation(fields: [tenantId], references: [id])
  branches    ItemBranch[]

  @@index([tenantId, isDeleted], map: "idx_item_tenant_active")
  @@index([tenantId, type], map: "idx_item_tenant_type")
}

model ItemBranch {
  id           String         @id @default(cuid())
  itemId       String
  siteId       String
  reorderPoint Int            @default(0)
  reorderQty   Int            @default(0)
  safetyStock  Int            @default(0)
  leadTimeDays Int            @default(0)
  lotSize      Int            @default(1)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  version      Int            @default(1)
  isDeleted    Boolean        @default(false)
  createdBy    String?
  updatedBy    String?
  tenantId     String
  item         Item           @relation(fields: [itemId], references: [id])
  locations    ItemLocation[]

  @@index([tenantId, itemId], map: "idx_itembranch_tenant_item")
}

model ItemLocation {
  id           String     @id @default(cuid())
  itemBranchId String
  bin          String
  lotNumber    String?
  qtyOnHand    Int        @default(0)
  qtyCommitted Int        @default(0)
  qtyOnOrder   Int        @default(0)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  version      Int        @default(1)
  isDeleted    Boolean    @default(false)
  createdBy    String?
  updatedBy    String?
  tenantId     String
  itemBranch   ItemBranch @relation(fields: [itemBranchId], references: [id])

  @@index([tenantId, itemBranchId], map: "idx_itemlocation_tenant_branch")
}

model InventoryTx {
  id        String   @id @default(cuid())
  tenantId  String
  itemId    String
  siteId    String
  location  String
  txType    String
  qty       Int
  unitCost  Decimal  @default(0)
  refType   String?
  refId     String?
  userId    String?
  version   Int      @default(1)
  isDeleted Boolean  @default(false)
  createdBy String?
  updatedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId, itemId, createdAt], map: "idx_inventorytx_tenant_item_time")
  @@index([tenantId, siteId, createdAt], map: "idx_inventorytx_tenant_site")
  @@index([tenantId, txType, createdAt], map: "idx_inventorytx_tenant_type")
}

model Equipment {
  id              String      @id @default(cuid())
  tenantId        String
  code            String      @unique
  acquisitionCost Decimal     @default(0)
  currentValue    Decimal     @default(0)
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  version         Int         @default(1)
  isDeleted       Boolean     @default(false)
  currentSiteId   String?
  type            String
  createdBy       String?
  updatedBy       String?
  breakdowns      Breakdown[]
  tenant          Tenant      @relation(fields: [tenantId], references: [id])
  usageLogs       UsageLog[]
  workOrders      WorkOrder[]

  @@index([tenantId, isDeleted], map: "idx_equipment_tenant_active")
  @@index([tenantId, code], map: "idx_equipment_tenant_code")
  @@index([tenantId, currentSiteId], map: "idx_equipment_tenant_site")
  @@index([tenantId, type], map: "idx_equipment_tenant_type")
}

model UsageLog {
  id          String    @id @default(cuid())
  tenantId    String
  equipmentId String
  shiftDate   DateTime
  hoursUsed   Decimal   @default(0)
  loadUnits   Decimal   @default(0)
  createdAt   DateTime  @default(now())
  version     Int       @default(1)
  isDeleted   Boolean   @default(false)
  createdBy   String?
  updatedBy   String?
  updatedAt   DateTime  @updatedAt
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  tenant      Tenant    @relation(fields: [tenantId], references: [id])

  @@index([tenantId, equipmentId, shiftDate], map: "idx_usagelog_tenant_equipment_time")
  @@index([tenantId, shiftDate], map: "idx_usagelog_tenant_shift")
}

model Breakdown {
  id          String    @id @default(cuid())
  tenantId    String
  equipmentId String
  startAt     DateTime
  endAt       DateTime?
  reason      String?
  notes       String?
  createdAt   DateTime  @default(now())
  version     Int       @default(1)
  isDeleted   Boolean   @default(false)
  createdBy   String?
  updatedBy   String?
  updatedAt   DateTime  @updatedAt
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  tenant      Tenant    @relation(fields: [tenantId], references: [id])

  @@index([tenantId, equipmentId, startAt], map: "idx_breakdown_tenant_equipment_time")
}

model WorkOrder {
  id            String    @id @default(cuid())
  tenantId      String
  equipmentId   String
  type          String
  status        String
  scheduledDate DateTime?
  estimatedCost Decimal   @default(0)
  actualCost    Decimal   @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  createdBy     String?
  updatedBy     String?
  version       Int       @default(1)
  isDeleted     Boolean   @default(false)
  equipment     Equipment @relation(fields: [equipmentId], references: [id])
  tenant        Tenant    @relation(fields: [tenantId], references: [id])

  @@index([tenantId, scheduledDate], map: "idx_workorder_tenant_scheduled")
  @@index([tenantId, status], map: "idx_workorder_tenant_status")
  @@index([tenantId, type], map: "idx_workorder_tenant_type")
}

model PurchaseRequisition {
  id          String   @id @default(cuid())
  tenantId    String
  requesterId String
  status      String
  costCenter  String?
  projectId   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int      @default(1)
  isDeleted   Boolean  @default(false)
  createdBy   String?
  updatedBy   String?
  tenant      Tenant   @relation(fields: [tenantId], references: [id])
}

model PurchaseOrder {
  id           String    @id @default(cuid())
  tenantId     String
  supplierId   String
  status       String
  currency     String    @default("PGK")
  exchangeRate Decimal   @default(1)
  deliveryDate DateTime?
  totalAmount  Decimal   @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  version      Int       @default(1)
  isDeleted    Boolean   @default(false)
  createdBy    String?
  updatedBy    String?
  tenant       Tenant    @relation(fields: [tenantId], references: [id])

  @@index([tenantId, status], map: "idx_purchaseorder_tenant_status")
  @@index([tenantId, supplierId], map: "idx_purchaseorder_tenant_supplier")
}

model GRN {
  id         String   @id @default(cuid())
  tenantId   String
  poId       String
  receivedAt DateTime @default(now())
  userId     String?
  createdAt  DateTime @default(now())
  version    Int      @default(1)
  isDeleted  Boolean  @default(false)
  createdBy  String?
  updatedBy  String?
  updatedAt  DateTime @updatedAt
  tenant     Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId, poId], map: "idx_grn_tenant_po")
}

model APInvoice {
  id         String   @id @default(cuid())
  tenantId   String
  poId       String?
  supplierId String
  invoiceNo  String
  amount     Decimal  @default(0)
  currency   String   @default("PGK")
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  version    Int      @default(1)
  isDeleted  Boolean  @default(false)
  createdBy  String?
  updatedBy  String?
  tenant     Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId, status], map: "idx_apinvoice_tenant_status")
  @@index([tenantId, supplierId], map: "idx_apinvoice_tenant_supplier")
}

model ARInvoice {
  id          String   @id @default(cuid())
  tenantId    String
  customerId  String
  rentalRefId String?
  amount      Decimal  @default(0)
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int      @default(1)
  isDeleted   Boolean  @default(false)
  createdBy   String?
  updatedBy   String?
  tenant      Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId, customerId], map: "idx_arinvoice_tenant_customer")
  @@index([tenantId, status], map: "idx_arinvoice_tenant_status")
}

model ChartAccount {
  id           String    @id @default(cuid())
  tenantId     String
  company      String
  businessUnit String
  object       String
  subsidiary   String
  project      String?
  currency     String    @default("PGK")
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  description  String
  createdBy    String?
  updatedBy    String?
  version      Int       @default(1)
  isDeleted    Boolean   @default(false)
  tenant       Tenant    @relation(fields: [tenantId], references: [id])
  glEntries    GLEntry[]

  @@index([tenantId, company, businessUnit, object], map: "idx_chartaccount_tenant_dimensions")
}

model GLEntry {
  id           String       @id @default(cuid())
  tenantId     String
  accountId    String
  amount       Decimal
  currency     String       @default("PGK")
  exchangeRate Decimal      @default(1)
  batchNo      String
  batchType    String
  createdAt    DateTime     @default(now())
  createdBy    String?
  updatedBy    String?
  version      Int          @default(1)
  isDeleted    Boolean      @default(false)
  updatedAt    DateTime     @updatedAt
  account      ChartAccount @relation(fields: [accountId], references: [id])
  tenant       Tenant       @relation(fields: [tenantId], references: [id])

  @@index([tenantId, accountId, createdAt], map: "idx_glentry_tenant_account_time")
  @@index([tenantId, batchNo, batchType], map: "idx_glentry_tenant_batch")
  @@index([tenantId, createdAt], map: "idx_glentry_tenant_posting")
}

model Employee {
  id          String      @id @default(cuid())
  tenantId    String
  hireDate    DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  abId        String
  orgUnitId   String?
  version     Int         @default(1)
  isDeleted   Boolean     @default(false)
  createdBy   String?
  updatedBy   String?
  addressBook AddressBook @relation(fields: [abId], references: [id])
  tenant      Tenant      @relation(fields: [tenantId], references: [id])

  @@index([tenantId, hireDate], map: "idx_employee_tenant_hire")
}

model Leave {
  id         String   @id @default(cuid())
  employeeId String
  type       String
  startDate  DateTime
  endDate    DateTime
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  version    Int      @default(1)
  isDeleted  Boolean  @default(false)
  createdBy  String?
  updatedBy  String?
  tenantId   String

  @@index([tenantId, employeeId], map: "idx_leave_tenant_employee")
}

model Timesheet {
  id          String   @id @default(cuid())
  employeeId  String
  shiftDate   DateTime
  hoursWorked Decimal  @default(0)
  status      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  version     Int      @default(1)
  isDeleted   Boolean  @default(false)
  createdBy   String?
  updatedBy   String?
  tenantId    String

  @@index([tenantId, employeeId], map: "idx_timesheet_tenant_employee")
}

model Ticket {
  id         String   @id @default(cuid())
  tenantId   String
  customerId String
  type       String
  status     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  version    Int      @default(1)
  isDeleted  Boolean  @default(false)
  createdBy  String?
  updatedBy  String?
  tenant     Tenant   @relation(fields: [tenantId], references: [id])

  @@index([tenantId, customerId], map: "idx_ticket_tenant_customer")
}
