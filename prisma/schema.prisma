generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String                 @id @default(uuid())
  email                 String                 @unique
  firstName             String
  lastName              String
  phone                 String?
  isActive              Boolean                @default(true)
  lastLoginAt           DateTime?
  tenantId              String                 @default("default")
  roleId                String
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  version               Int                    @default(1)
  isDeleted             Boolean                @default(false)
  auditLogs             AuditLog[]
  breakdowns            Breakdown[]
  employees             Employee[]
  glEntries             GLEntry[]
  inventoryTransactions InventoryTransaction[]
  usageLogs             UsageLog[]
  role                  Role                   @relation(fields: [roleId], references: [id])

  @@index([tenantId])
  @@index([email])
  @@index([isActive])
}

model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  permissions Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  users       User[]
}

model AuditLog {
  id         String   @id @default(uuid())
  tenantId   String   @default("default")
  userId     String
  action     String
  entityType String
  entityId   String?
  oldValues  Json?
  newValues  Json?
  ipAddress  String?
  userAgent  String?
  createdAt  DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([entityType, entityId])
  @@index([createdAt])
}

model AddressBook {
  id           String     @id @default(uuid())
  tenantId     String     @default("default")
  alphaName    String
  isCustomer   Boolean    @default(false)
  isVendor     Boolean    @default(false)
  isEmployee   Boolean    @default(false)
  altKey       String?
  addressLine1 String?
  city         String?
  state        String?
  postalCode   String?
  country      String?    @default("Indonesia")
  phone        String?
  email        String?
  taxNumber    String?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  version      Int        @default(1)
  isDeleted    Boolean    @default(false)
  customers    Customer[]
  employees    Employee[]
  suppliers    Supplier[]

  @@index([tenantId])
  @@index([alphaName])
  @@index([isCustomer, isVendor, isEmployee])
}

model Product {
  id                    String                 @id @default(uuid())
  tenantId              String                 @default("default")
  name                  String
  code                  String                 @unique
  description           String?
  sku                   String                 @unique
  price                 Int
  costPrice             Int
  minStockLevel         Int                    @default(0)
  maxStockLevel         Int?
  currentStock          Int                    @default(0)
  unitOfMeasure         String                 @default("PCS")
  reorderPoint          Int                    @default(0)
  reorderQuantity       Int                    @default(0)
  safetyStock           Int                    @default(0)
  leadTimeDays          Int                    @default(0)
  lotSize               Int                    @default(1)
  isActive              Boolean                @default(true)
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  version               Int                    @default(1)
  isDeleted             Boolean                @default(false)
  inventoryTransactions InventoryTransaction[]

  @@index([tenantId])
  @@index([isActive])
}

model InventoryTransaction {
  id              String                   @id @default(uuid())
  tenantId        String                   @default("default")
  productId       String
  userId          String
  transactionType InventoryTransactionType
  quantity        Int
  unitCost        Int                      @default(0)
  referenceType   String?
  referenceId     String?
  notes           String?
  lotNumber       String?
  binLocation     String?
  createdAt       DateTime                 @default(now())
  version         Int                      @default(1)
  product         Product                  @relation(fields: [productId], references: [id])
  user            User                     @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([productId])
  @@index([transactionType])
  @@index([createdAt])
}

model Equipment {
  id                  String          @id @default(uuid())
  tenantId            String          @default("default")
  name                String
  code                String          @unique
  model               String?
  serialNumber        String?         @unique
  manufacturer        String?
  acquisitionCost     Int?
  currentValue        Int?
  depreciationMethod  String?
  usefulLife          Int?
  salvageValue        Int?
  status              EquipmentStatus @default(AVAILABLE)
  location            String?
  lastMaintenanceDate DateTime?
  nextMaintenanceDate DateTime?
  totalOperatingHours Int             @default(0)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  version             Int             @default(1)
  isDeleted           Boolean         @default(false)
  breakdowns          Breakdown[]
  usageLogs           UsageLog[]

  @@index([tenantId])
  @@index([status])
  @@index([location])
}

model UsageLog {
  id          String    @id @default(uuid())
  tenantId    String    @default("default")
  equipmentId String
  userId      String
  shiftDate   DateTime
  hoursUsed   Decimal   @default(0)
  loadUnits   Decimal   @default(0)
  notes       String?
  createdAt   DateTime  @default(now())
  version     Int       @default(1)
  equipment   Equipment @relation(fields: [equipmentId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([equipmentId])
  @@index([shiftDate])
}

model Breakdown {
  id          String            @id @default(uuid())
  tenantId    String            @default("default")
  equipmentId String
  userId      String
  startAt     DateTime
  endAt       DateTime?
  reason      String?
  notes       String?
  severity    BreakdownSeverity @default(MINOR)
  createdAt   DateTime          @default(now())
  version     Int               @default(1)
  equipment   Equipment         @relation(fields: [equipmentId], references: [id])
  user        User              @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([equipmentId])
  @@index([startAt])
}

model ChartAccount {
  id              String         @id @default(uuid())
  tenantId        String         @default("default")
  accountNumber   String         @unique
  name            String
  type            AccountType
  parentAccountId String?
  company         String         @default("default")
  businessUnit    String         @default("default")
  object          String         @default("default")
  subsidiary      String         @default("default")
  project         String?
  balance         Int            @default(0)
  isActive        Boolean        @default(true)
  currency        String         @default("IDR")
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  version         Int            @default(1)
  parentAccount   ChartAccount?  @relation("AccountHierarchy", fields: [parentAccountId], references: [id])
  childAccounts   ChartAccount[] @relation("AccountHierarchy")
  glEntries       GLEntry[]

  @@index([tenantId])
  @@index([accountNumber])
  @@index([type])
  @@index([company, businessUnit, object, subsidiary])
}

model GLEntry {
  id            String       @id @default(uuid())
  tenantId      String       @default("default")
  accountId     String
  amount        Int
  currency      String       @default("IDR")
  exchangeRate  Decimal      @default(1)
  batchNo       String
  batchType     String
  journalEntry  String?
  description   String?
  referenceType String?
  referenceId   String?
  userId        String?
  createdAt     DateTime     @default(now())
  version       Int          @default(1)
  account       ChartAccount @relation(fields: [accountId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([accountId])
  @@index([batchNo])
  @@index([createdAt])
}

model IdempotencyLog {
  id          String   @id @default(uuid())
  tenantId    String   @default("default")
  userId      String
  key         String
  hash        String
  result      Json?
  committedAt DateTime @default(now())

  @@unique([tenantId, userId, key])
  @@index([tenantId])
  @@index([committedAt])
}

model EventOutbox {
  id        String   @id @default(uuid())
  tenantId  String   @default("default")
  type      String
  entity    String
  entityId  String
  version   Int
  payload   Json
  createdAt DateTime @default(now())
  delivered Boolean  @default(false)

  @@index([tenantId])
  @@index([delivered])
  @@index([createdAt])
}

model Customer {
  id             String         @id @default(uuid())
  tenantId       String         @default("default")
  addressBookId  String
  customerNumber String         @unique
  customerType   CustomerType   @default(INDIVIDUAL)
  industry       String?
  creditLimit    Int            @default(0)
  currentBalance Int            @default(0)
  status         CustomerStatus @default(ACTIVE)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  version        Int            @default(1)
  addressBook    AddressBook    @relation(fields: [addressBookId], references: [id])

  @@index([tenantId])
  @@index([addressBookId])
  @@index([status])
}

model Supplier {
  id                 String      @id @default(uuid())
  tenantId           String      @default("default")
  addressBookId      String
  supplierCode       String      @unique
  paymentTerms       String?
  creditLimit        Int?
  currentBalance     Int         @default(0)
  onTimeDeliveryRate Decimal?    @default(0)
  qualityRating      Decimal?    @default(0)
  isActive           Boolean     @default(true)
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  version            Int         @default(1)
  addressBook        AddressBook @relation(fields: [addressBookId], references: [id])

  @@index([tenantId])
  @@index([addressBookId])
  @@index([isActive])
}

model Employee {
  id               String           @id @default(uuid())
  tenantId         String           @default("default")
  addressBookId    String
  employeeNumber   String           @unique
  userId           String
  firstName        String
  lastName         String
  email            String           @unique
  phone            String?
  position         String
  hireDate         DateTime
  employmentStatus EmploymentStatus @default(ACTIVE)
  baseSalary       Int
  allowances       Int              @default(0)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  version          Int              @default(1)
  addressBook      AddressBook      @relation(fields: [addressBookId], references: [id])
  user             User             @relation(fields: [userId], references: [id])

  @@index([tenantId])
  @@index([addressBookId])
  @@index([employmentStatus])
}

enum InventoryTransactionType {
  IN
  OUT
  ADJUSTMENT
  TRANSFER
  GRN
  GI
}

enum EquipmentStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  REPAIR
  RETIRED
  LOST
}

enum BreakdownSeverity {
  MINOR
  MODERATE
  MAJOR
  CRITICAL
}

enum AccountType {
  ASSET
  LIABILITY
  EQUITY
  REVENUE
  EXPENSE
}

enum CustomerType {
  INDIVIDUAL
  COMPANY
  GOVERNMENT
}

enum CustomerStatus {
  ACTIVE
  INACTIVE
  PROSPECT
  LEAD
}

enum EmploymentStatus {
  ACTIVE
  INACTIVE
  TERMINATED
  ON_LEAVE
}
